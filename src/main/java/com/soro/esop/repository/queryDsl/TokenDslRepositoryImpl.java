package com.soro.esop.repository.queryDsl;

import com.querydsl.jpa.impl.JPAQueryFactory;
import com.soro.esop.entity.QToken;
import com.soro.esop.entity.Token;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

/**
 * packageName : com.soro.esop.repository.queryDsl
 * fileName    : TokenRepositoryImpl
 * author      : soromiso
 * date        : 9/1/24
 * description :
 * ===========================================================
 * DATE                 AUTHOR             NOTE
 * -----------------------------------------------------------
 * 9/1/24             soromiso             new
 */

@RequiredArgsConstructor
public class TokenDslRepositoryImpl implements TokenDslRepository {

    private final JPAQueryFactory queryFactory;

    @Override
    public Optional<Token> findByToken(String token) {
        QToken qToken = QToken.token1; // assuming 'token1' is the variable name generated by Querydsl

        Token result = queryFactory
                .selectFrom(qToken)
                .where(qToken.token.eq(token))
                .fetchOne();

        return Optional.ofNullable(result);
    }

    @Override
    public List<Token> findAllValidTokensByUserName(String userName) {
        QToken qToken = QToken.token1;

        return queryFactory
                .selectFrom(qToken)
                .where(qToken.userName.eq(userName)
                        .and(qToken.expired.isFalse())
                        .and(qToken.revoked.isFalse()))
                .fetch();
    }

    @Override
    @Transactional
    public long updateAllByUserName(String userName, boolean expired, boolean revoked) {
        QToken qToken = QToken.token1;

        return queryFactory.update(qToken)
                .set(qToken.expired, expired)
                .set(qToken.revoked, revoked)
                .where(qToken.userName.eq(userName))
                .execute();
    }
}
